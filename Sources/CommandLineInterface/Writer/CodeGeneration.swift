typealias DeviceCodeBlock = (caseItem: String, propertyItem: String)

extension Device {
    var codeBlock: DeviceCodeBlock {
        DeviceCodeBlock(
            caseItem: "\(caseItem(sanitized(id)))",
            propertyItem: """
            /// \(name)
                public static let \(sanitized(id)) = Device(id: \"\(id)\", model: \"\(name)\")
            """
        )
    }
}

typealias PlatformCodeBlock = (allCases: String, allProperties: String)

extension Platform {
    var codeBlock: PlatformCodeBlock {
        PlatformCodeBlock(
            allCases: """
            // # \(id.displayName)
                    \(devices.map(\.codeBlock.caseItem).joined(separator: ",\n        "))
            """,
            allProperties: """
            // # \(id.displayName)
                \(devices.map(\.codeBlock.propertyItem).joined(separator: "\n    "))
            """
        )
    }
}

typealias PlatformsCodeBlock = (allCases: String, allProperties: String)

extension Array where Element == Platform {
    var codeBlock: PlatformsCodeBlock {
        PlatformsCodeBlock(
            allCases: """
            public static let allCases: [Device] = [
                    \(map(\.codeBlock.allCases).joined(separator: ",\n        "))
                ]
            """,
            allProperties: """
            /// The current instance of the device that is running.
                public static let current = Device(id: deviceIdentifier)
                /// An unknown device instance.
                public static let unknown = Device(id: "unknown", model: "unknown")
                \(map(\.codeBlock.allProperties).joined(separator: "\n    "))
            """
        )
    }
}

let sanitized: (String) -> String = { product in
    [
        product
            .replacingOccurrences(
                of: "[,-]",
                with: "_",
                options: .regularExpression
            ),
    ]
    .map { sanitized in
        sanitized.prefix(1).lowercased() + String(sanitized.dropFirst())
    }
    .joined()
}

let caseItem: (String) -> String = { product in
    ".\(product)"
}

func fileContent(platforms: [Platform], xcode: Xcode) -> String {
    """
    import Foundation

    /*
     * Do not edit this file.
     * Generated from Xcode's Command-Line Tools databases - Xcode \(xcode.appVersion) (\(xcode.buildNumber)).
     **/

    /// The representation of the device running - it could be either physical or simulated.
    /// > Generated from Xcode's Command-Line Tools databases - Xcode \(xcode.appVersion) (\(xcode.buildNumber)).
    public struct Device: Identifiable, Hashable, CaseIterable {
        /// The identifier for the device.
        public let id: String
        /// The known/commercial name of the device.
        public let model: String

        /// Creates a representation of a device.
        /// - Parameters:
        ///   - id: The identifier for the device.
        ///   - model: The known/commercial name of the device.
        init(id: String, model: String) {
            self.id = id
            self.model = model
        }

        /// Creates a representation of the device found in Xcode's databases based on the given device identifier.
        /// - Parameter id: The identifier for the device.
        init(id: String) {
            if let device = Device.allCases.first(where: { $0.id == id }) {
                self = device
            } else if let simulator = Device.simulators.first(where: { $0.id == id }) {
                self = simulator
            } else {
                self = .unknown
            }
        }

        /// Simulator instances.
        static let simulators: [Device] = {
            ["i386", "x86_64", "arm64"]
                .map { deviceId in
                    Device(id: deviceId, model: "Simulator")
                }
        }()

        /// The device identifier read from the system info.
        static let deviceIdentifier: String = {
            var systemInfo = utsname()
            uname(&systemInfo)
            return String(
                cString: [UInt8](
                    Data(
                        bytes: &systemInfo.machine,
                        count: Int(_SYS_NAMELEN)
                    )
                )
            )
        }()

        /// It is `true` when the device does not match either simulators or physical devices.
        public var isUnknown: Bool {
            self == .unknown
        }

        /// It is `true` when running on a simulator instance.
        public var isSimulator: Bool {
            Device.simulators.contains(self)
        }

        /// It is `true` when running on a physical device.
        public var isDevice: Bool {
            !isSimulator && !isUnknown
        }

        \(platforms.codeBlock.allProperties)

        \(platforms.codeBlock.allCases)
    }
    """
}
